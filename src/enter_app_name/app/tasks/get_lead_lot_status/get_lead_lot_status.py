import os
import logging
import shutil
import pandas as pd
from dotenv import load_dotenv
from flask import current_app
from celery.utils.log import get_task_logger
from enter_app_name.app.utils import SqlQuery, get_query_hash, write_to_csv
from enter_app_name.app.schemas import get_schema
from .. import StandardTask


load_dotenv()
logger = logging.getLogger(__name__)
# logger = get_task_logger(__name__)


class GetLeadLotStatusTask():
    def __init__(self, userinfo: dict, payload: dict, taskname: str):
        self.userinfo = userinfo
        self.check_lots = None  # {'lot_ids': [], 'meas_steps: []}
        self.host_directory = os.environ.get('LEAD_LOT_DIRECTORY')

    def check_new_lead_lots(self):
        # compare excel file used by shift tech with csv generated by this task
        # to copy file to avoid data corruption during reading as file is shared and edited by shift techs
        copy_path = os.path.join(self.host_directory, 'lead_lots_to_check_online.csv')
        dest_path = os.path.join(self.host_directory, 'etc', 'lead_lots_to_check_offline.csv')
        shutil.copyfile(copy_path, dest_path)
        raw_df = pd.read_csv(dest_path, encoding="cp1252")
        
    
    def data_cleanup(self):
        pass
    
    def get_lot_status(self):
        # fetching from PROD06
        pass

    def get_spc_violation(self):
        # fetching from SNOWFLAKE
        # filter lots that have passed the steps
        logger.info('querying from snowflake')
        get_schema('GET_SPC_VIOLATION').load(self.check_lots)
        fab = 7 if self.userinfo['fab'] == 'F10W' else 10
        query_hash = get_query_hash('GET_SPC_VIOLATION')
        dbinstance = query_hash['db_helper'][self.userinfo['fab']]
        config = current_app.config[dbinstance]
        self.check_lots['fab'] = fab
        sql_results = SqlQuery(
            config,
            self.check_lots,
            query_hash['sql_string'],
            query_hash['sql_helper'],
            ''
        ).query()
        logger.info('querying from snowflake successful')
        return sql_results
    
    def lot_mapping(self):
        # a lot can have multiple failures at single meas step
        # to concat PARAMETER_NAME, VIOL_DESC and VIOL_TYPE, separate each with comma
        # if a lot doesn't have a failure, for INSP: TAD and TRD within control limit; for REVIEW: REVIEW parameters within control limit
        pass
        # sort by lot_id, meas_step_seq_no
    
    def generate_html(self):
        pass

    def execute(self):


        write_to_csv(os.path.join(self.host_directory, 'lead_lot_status (DO NOT MODIFY).csv'), sql_results)
        return 'get lead lot status success'

